### Create and configure file systems

1. Create, mount, unmount, and use vfat, ext4, and xfs file systems

    * A file system is a logical container that is used to store files and directories. Each file system must be connected to the root of the directory hierarchy to be accessible. This is typically done automatically on system boot but can be done manually as well. Each file system can be mounted or unmounted using the UUID associated with it or by using a label that can be assigned to it. Mounting is the process of attaching an additional filesystem, which resides on a CDROM, Hard Disk Drive (HDD) or other storage device, to the currently accessible filesystem of a computer. 

    * Each file system is created in a separate partition or logical volume. A typical RHEL system has numerous file systems. During OS installation, the `/` and `/boot` file systems are created by default. Typical additional file systems created during installation include `/home`, `/opt`, `/tmp`, `/usr` and `/var`.

    * File systems supported in RHEL are categorised as disk-based, network-based, and memory-based. Disk-based and network-based file systems are stored persistently, while data in memory-based systems is lost at system reboot. The different file systems are shown below:

    | File System          | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
    |----------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | ext2                 | Disk    | The second generation of the extended file system. The first generation is no longer supported. ext2 is deprecated in RHEL and will be removed in a future RHEL release.                                                                                                                                                                                                                                                                                                                                        |
    | ext3                 | Disk    | The third generation of the extended file system. It supports metadata journaling for faster recovery, superior reliability, file systems up to 16TB, files up to 2TB, and up to 32,000 sub-directories. ext3 writes each metadata update in its entirety to the journal after it has been completed. The system looks in the file system journal following a reboot after a system crash has occurred, and recovers the file system rapidly using the updated structural information stored in its journal. |
    | ext4                 | Disk    | The fourth generation of the extended file system. It supports file systems up to 1EB, files up to 16TB, an unlimited number of sub-directories, metadata and quota journaling, and extended user attributes.                                                                                                                                                                                                                                                                                                   |
    | xfs                  | Disk    | XFS is a highly scalable and high-performance 64-bit file system.  It supports metadata journaling for faster crash recovery, online defragmentation, expansion quota journaling, and extended user attributes. It supports file systems and files of sizes up to 8EB. It is the default file system in RHEL 8.                                                                                                                                                                                                  |
    | btrfs                | Disk    | B-tree file system that supports a system size of 50TB. It supports more files, larger files, and larger volumes than ext4 and supports snapshotting and compression capabilities.                                                                                                                                                                                                                                                                                                                              |
    | vfat                 | Disk    | This is used for post-Windows 95 file system format on hard disks, USB drives, and floppy disks.                                                                                                                                                                                                                                                                                                                                                                                                                |
    | iso9660              | Disk    | This is used for CD/DVD-based optical file systems.                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
    | BIOS Boot            | Disk    | A very small partition required for booting a device with a GUID partition table (GPT) on a BIOS system.                                                                                                                                                                                                                                                                                                                                                                                                        |
    | EFI System Partition | Disk    | A small partition required for booting a device with a GUID partition table (GPT) on a UEFI system.                                                                                                                                                                                                                                                                                                                                                                                                             |
    | NFS                  | Network | A directory or file system shared over the network for access by other Linux systems.                                                                                                                                                                                                                                                                                                                                                                                                                           |
    | AutoFS               | Network | An NFS file system set to mount and unmount automatically on a remote system.                                                                                                                                                                                                                                                                                                                                                                                                                                   |
    | CIFS                 | Network | Common Internet File System (aka Samba). A directory or file system shared over the network for access by Windows and other Linux systems.                                                                                                                                                                                                                                                                                                                                                                    |

    * The *mount* command is used to attach a file system to a desired point in the directory hierarchy to make it accessible to users and applications. This point is referred to as the *mount point*, which is essentially an empty directory created solely for this point. The *mount* command requires the absolute pathname (or its UUID or label) to the block device containing the file system, and a mount point name to attach it to the directory tree. The *mount* command adds an entry to the `/proc/mounts` file and instructs the kernel to add the entry to the `/proc/mounts` file as well after a file system has been successfully mounted.

    * The opposite of the *mount* command is *unmount*, which is used to detach a file system from the directory hierarchy and make it inaccessible to users and applications.

    * To create a vfat file system:
        ```shell   
        mkfs.vfat <path>
        ```

    * To mount a vfat file system:
        ```shell   
        mount <path> /mnt
        ```

     * To unmount a vfat file system:
        ```shell   
        umount <path> /mnt
        ```

     * To check a vfat file system:
        ```shell   
        fsck.vfat <path>
        ```

    * To create an ext4 file system:
        ```shell   
        mkfs.ext4 <path>
        ```

    * To mount an ext4 file system:
        ```shell   
        mount <path> /mnt
        ```

     * To unmount an ext4 file system:
        ```shell   
        umount <path> /mnt
        ```

     * To check an ext4 file system:
        ```shell   
        fsck <path>
        ```

     * To get additional details about an ext4 file system:
        ```shell   
        dumpe2fs <path>
        ```

    * To create a xfs file system:
        ```shell   
        mkfs.xfs <path>
        ```

    * To mount a xfs file system:
        ```shell   
        mount <path> /mnt
        ```

     * To unmount a xfs file system:
        ```shell   
        umount <path> /mnt
        ```

     * To check a xfs file system:
        ```shell   
        xfs_repair <path>
        ```

     * To get additional details about an xfs file system:
        ```shell   
        xfs_info <path>
        ```

    * The path is the device name or a regular file that shall contain the file system.

1. Mount and unmount network file systems using NFS

     * To confirm nfs-utils is installed:
        ```shell   
        dnf install nfs-utils
        ```

     * To mount the network file system:
        ```shell   
        mount -t nfs 10.0.2.5:/home/nfs-share /mnt
        ```

     * Alternatively the following can be run after adding the entry to `/etc/fstab`:
        ```shell   
        mount -a 
        ```

     * Using AutoFS with NFS:
        ```shell
		# on the server
        systemctl status 
		mkdir /common
		echo "/common *(rw)" >> /etc/exports
		systemctl restart nfs-server.service

		# on the client
		dnf install autofs -y
		mkdir /autodir
		vi /etc/auto.master
		# add line
		#/- /etc/auto.master.d/auto.dir
		vi /etc/auto.master.d/auto.dir
		# add line
		#/autodir 172.25.1.4:/common
		systemctl restart autofs & systemctl enable autofs

		# on the server
		touch /common/test
		
		# on the client
		ls /autodir # confirm test file is created
        ``` 

1. Extend existing logical volumes

     * To extend the logical volume size by 2GB:
        ```shell   
        lvextend -L+2G /dev/vg1/lv1
        lvdisplay # confirm changes
        ```

     * To extend the file system:
        ```shell   
        df -Th # confirm file system type
        resize2fs /dev/vg1/lvl1 # for ext3 or ext4
        xfs_growfs /mnt # for xfs
        ```

1. Create and configure set-GID directories for collaboration

     * SUID (meaning set user id) is used to specify that a user can run an executable file with effective permissions of the file owner.  This is primarily used to elevate the privileges of the current user. When a user executes the file, the operating system will execute as the file owner. Instead of the normal *x* which represents execute permissions, an *s* will be visible. To set the SUID:
        ```shell
        chmod u+s <filename>
        ```
     
     * SGID (meaning set group id) is used to specify that a user can run an executable file with effective permissions of the owning group.  When a user executes the file, the operating system will execute as the owning group. Instead of the normal x which represents execute permissions, an s will be visible. To set the SGID:
        ```shell
        chmod g+s <filename>
        ```
    
     * To create a group and shared directory:
        ```shell
        groupadd accounts
        mkdir -p /home/shared/accounts
        chown nobody:accounts /home/shared/accounts
        chmod g+s /home/shared/accounts
        chmod 070 /home/shared/accounts
        ```

     * When using SGID on a directory all files that are created in the directory will be owned by the group of the directory as opposed to the group of the owner.

     * If the sticky bit is set on a directory, the files in that directory can only be removed by the owner. A typical use case is for the `/tmp` directory. It can be written to by any user, but other users cannot delete the files of others. To set the sticky bit:
        ```shell
        chmod +t <directory>
        ```

    * The SUID, SGID and sticky bit can also be set with number notation. The standard number (rwx) is prepended with 4 for SUID, 2 for SGID, and 1 for the sticky bit.

    * To remove special permissions the *-* flag is used instead of the *+* flag.
     
1. Configure disk compression

    * The Virtual Data Optimiser (VDO) provides data reduction in the form of deduplication, compression, and thin provisioning.

    * To install vdo:
        ```shell
        dnf install vdo kmod-kvdo
        ```

    * To create the vdo:
        ```shell
        vdo create --name=vdo1 --device=/dev/sdb --vdoLogicalSize=30G --writePolicy=async
        ```

    * To create and mount the file system:
        ```shell
        mkfs.xfs /dev/mapper/vdo1
        mount /dev/mapper/vdo1 /mnt
        ```

1. Manage layered storage

    * Stratis is a storage management solution introduced in RHEL 8 that allows the configuration of advanced storage features such as pool-based management, thin provisioning, file system snapshots and monitoring.

    * To install stratis:
        ```shell
        dnf install stratisd stratis-cli
        systemctl start stratisd
        ```

    * To confirm there is no file system on the disk to be used:
        ```shell
        lsblk
        blkid -p /dev/sdb
        ```

    * If there is a file system remove it using:
        ```shell
        wipefs -a /dev/sdb
        ```

    * To create a stratis pool and confirm:
        ```shell
        stratis pool create strat1 /dev/sdb
        stratis pool list
        ```

    * To create a file system and confirm:
        ```shell
        stratis fs create strat1 fs1
        stratis fs list
        ```

    * To mount the file system and confirm:
        ```shell
        mount /stratis/strat1/fs1 /mnt
        df -h
        # add to /etc/fstab to make it persistent
        ```

    * To add a disk to the stratis pool and confirm:
        ```shell
        stratis pool add-data strat1 /dev/sdc
        stratis pool list
        ```

    * To create a snapshot and confirm:
        ```shell
        stratis fs snapshot strat1 fs1 snapshot1
        stratis filesystem list strat1
        ```

    * To mount a snapshot:
        ```shell
        unmount /stratis/strat1/fs1
        mount /stratis/strat1/snapshot1 /mnt
        ```

    * To destroy a snapshot and confirm:
        ```shell
        unmount /stratis/strat1/snapshot1
        stratis filesystem destroy strat1 snapshot1
        stratis filesystem list
        ```

    * To remove a stratis filesystem and pool and confirm:
        ```shell
        stratis filesystem destroy strat1 fs1
        stratis filesystem list
        stratis pool destroy strat1
        stratis pool list
        ```

1. Diagnose and correct file permission problems

    * File permissions can be modified using *chmod* and *setfacl*.
    
