### Deploy, configure, and maintain systems

1. Schedule tasks using at and cron

    * Job scheduling and execution is handled by the *atd* and *crond* daemons. While *atd* manages jobs scheduled to run once in the future, *crond* is responsible for running jobs repetitively at pre-specified times. At start-up, *crond* reads schedules in files located in the `/var/spool/cron` and `/etc/cron.d` directories, and loads them in memory for later execution.

    * There are 4 files that control permissions for setting scheduled jobs. These are *at.allow*, *at.deny*, *cron.allow* and *cron.deny*. These files are in the `/etc` directory. The syntax of the files is identical, with each file taking 1 username per line. If no files exist, then no users are permitted. By default, the *deny* files exist and are empty, and the *allow* files do not exist. This opens up full access to using both tools for all users.

    * All activities involving *atd* and *crond* are logged to the `/var/log/cron` file.

    * The *at* command is used to schedule one-time execution of a program by the *atd* daemon. All submitted jobs are stored in the `/var/spool/at` directory.

    * To schedule a job using *at* the below syntax is used:
        ```shell
        at 11:30pm 6/30/15
        ```

    * The commands to execute are defined in the terminal, press *ctrl+d* when finished. The added job can be viewed with *at* and can be removed with the *-d* option.

    * A shell script can also be provided:
        ```shell
        at -f ~/script1.sh 11:30pm 6/30/15
        ```

    * The `/etc/crontab` file has the following columns:
        * 1: Minutes of hour (0-59), with multiple comma separated values, or * to represent every minute.
        * 2: Hours of day (0-23), with multiple comma separated values, or * to represent every hour.
        * 3: Days of month (1-31), with multiple comma separated values, or * to represent every day.
        * 4: Month of year (1-12, jan-dec), with multiple comma separated values, or * to represent every month.
        * 5: Day of week (0-6, sun-sat), with multiple comma separated values, or * to represent every day.
        * 6: Full path name of the command or script to be executed, along with any arguments.
        
    * Step values can be used with */2 meaning every 2nd minute.
    
    * The *crontab* command can be used to edit the file. Common options are *e* (edit), *l* (view), *r* (remove):
        ```shell
        crontab -e
        ```

1. Start and stop services and configure services to start automatically at boot

    * To check the status of a service:
        ```shell
        systemctl status <service>
        ```

    * To start a service:
        ```shell
        systemctl start <service>
        ```

    * To stop a service:
        ```shell
        systemctl stop <service>
        ```

    * To make a service reload its configuration:
        ```shell
        systemctl reload <service>
        ```

    * To make a service reload its configuration or restart if it can't reload:
        ```shell
        systemctl reload-or-restart <service>
        ```

    * To make a service start on boot:
        ```shell
        systemctl enable <service>
        ```

    * To stop a service starting on boot:
        ```shell
        systemctl disable <service>
        ```

    * To check if a service is enabled:
        ```shell
        systemctl is-enabled <service>
        ```

    * To check if a service has failed:
        ```shell
        systemctl is-failed <service>
        ```

    * To view the configuration file for a service:
        ```shell
        systemctl cat /usr/lib/sysdtemd/system/<service>
        ```

   * To view the dependencies for a service:
        ```shell
        systemctl list-dependencies <service>
        ```

   * To stop a service from being run by anyone but the system and from being started on boot:
        ```shell
        systemctl mask <service>
        ```

   * To remove a mask:
        ```shell
        systemctl unmask <service>
        ```

1. Configure systems to boot into a specific target automatically

   * To get the default target:
        ```shell
        systemctl get-default
        ```

   * To list available targets:
        ```shell
        systemctl list-units --type target --all
        ```

   * To change the default target:
        ```shell
        systemctl set-default <target>
        ```

    * The change will take affect after a reboot.

1. Configure time service clients

    * To print the date:
        ```shell
        date +%d%m%y-%H%M%S
        ```

    * To set the system clock as per the hardware clock:
        ```shell
        hwclock -s
        ```

    * To set the hardware clock as per the system clock:
        ```shell
        hwclock -w
        ```

    * The *timedatectl* command can also be used to view the date and time.

    * To change the date or time:
        ```shell
        timedatectl set-time 2020-03-18
        timedatectl set-time 22:43:00
        ```

    * To view a list of time zones:
        ```shell
        timedatectl list-timezones
        ```

    * To change the time zone:
        ```shell
        timedatectl set-timezone <timezone>
        ```

    * To enable NTP:
        ```shell
        timedatectl set-ntp yes
        ```

    * To start the *chronyd* service:
        ```shell
        systemctl start chronyd
        ```

1. Install and update software packages from Red Hat Network, a remote repository, or from the local file system

    * The .rpm extension is a format for files that are manipulated by the Redhat Package Manager (RPM) package management system. RHEL 8 provides tools for the installation and administration of RPM packages. A package is a group of files organised in a directory structure and metadata that makes up a software application.

    * An RPM package name follows the below format:
        ```shell
        openssl-1.0.1e-34.el7.x86_64.rpm
        # package name = openssl
        # package version = 1.0.1e
        # package release = 34
        # RHEL version = el7
        # processor architecture = x86_64
        # extension = .rpm
        ```

    * The *subscription-manager* command can be used to link a Red Hat subscription to a system.

    * The *dnf* command is the front-end to *rpm* and is the preferred tool for package management. The *yum* command has been superseded by *dnf* in RHEL 8. It requires that the system has access to a software repository. The primary benefit of *dnf* is that it automatically resolves dependencies by downloading and installing any additional required packages.

    * To list enabled and disabled repositories:
        ```shell
        dnf repolist all
        dnf repoinfo
        ```
    
    * To search for a package:
        ```shell
        dnf search <package>
        dnf list <package>
        ```
    
    * To view more information about a particular package:
        ```shell
        dnf info <package>
        ```

    * To install a package:
        ```shell
        dnf install <package>
        ```

    * To remove a package:
        ```shell
        dnf remove <package>
        ```

    * To find a package from a file:
        ```shell
        dnf provides <path>
        ```

    * To install a package locally:
        ```shell
        dnf localinstall <path>
        ```

    * To view available groups:
        ```shell
        dnf groups list
        ```

    * To install a group (e.g. System Tools):
        ```shell
        dnf group "System Tools"
        ```

    * To remove a group (e.g. System Tools):
        ```shell
        dnf group remove "System Tools"
        ```

    * To see the history of installations using *dnf*:
        ```shell
        dnf history list
        ```

    * To undo a particular installation (e.g. ID=22):
        ```shell
        dnf history undo 22
        ```

    * To redo a particular installation (e.g. ID=22):
        ```shell
        dnf history redo 22
        ```

    * To add a repository using the dnf config manager:
        ```shell
        dnf config-manager --add-repo <url>
        ```

    * To enable a repository using the dnf config manager:
        ```shell
        dnf config-manager --enablerepo <repository>
        ```

    * To disable a repository using the dnf config manager:
        ```shell
        dnf config-manager --disablerepo <repository>
        ```

    * To create a repository:
        ```shell
        dnf install createrepo
        mkdir <path>
        createrepo --<name> <path>
        yum-config-manager --add-repo file://<path>
        ```

1. Work with package module streams

    * RHEL 8 introduced the concept of Application Streams. Components made available as Application Streams can be packaged as modules or RPM packages and are delivered through the AppStream repository in RHEL 8. Module streams represent versions of the Application Stream components. Only one module stream can be active at a particular time, but it allows multiple different versions to be available in the same dnf repository.
    
    * To view modules:
        ```shell
        dnf module list
        ```

    * To get information about a module: 
        ```shell
        dnf module info --profile <module-name>
        ```

    * To install a module: 
        ```shell
        dnf module install <module-name>
        ```

    * To remove a module: 
        ```shell
        dnf module remove <module-name>
        ```

    * To reset a module after removing it: 
        ```shell
        dnf module reset <module-name>
        ```

    * To be specific about the module installation:
        ```shell
        dnf module install <module-name>:<version>/<profile>
        ```

    * To check the version of a module:
        ```shell
        <module-name> -v
        ```

1. Modify the system bootloader

    * The GRUB2 configuration can be edited directly on the boot screen. The configuration can also be edited using the command line.

    * To view the grub2 commands: 
        ```shell
        grub2
        ```

    * To make a change to the configuration: 
        ```shell
        vi /etc/default/grub
        # Change a value
        grub2-mkconfig -o /boot/grub2/grub.cfg
        # View changes
        vi /boot/grub2/grub.cfg
        ```
